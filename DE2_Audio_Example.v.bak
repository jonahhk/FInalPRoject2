
module DE2_Audio_Example (
	// Inputs
	CLOCK_50,
	CLOCK_27,
	KEY,
	AUD_ADCDAT,

	// Bidirectionals
	AUD_BCLK,
	AUD_ADCLRCK,
	AUD_DACLRCK,
	I2C_SDAT,

	// Outputs
	AUD_XCK,
	AUD_DACDAT,
	I2C_SCLK,
	SW,
	address_sound,
	CLOCK_8k,
	q_sound

);


/*****************************************************************************

 *                           Parameter Declarations                          *

 *****************************************************************************/

/*****************************************************************************

 *                             Port Declarations                             *

 *****************************************************************************/
// Inputs

input				CLOCK_50;
input				CLOCK_27;
input		[3:0]	KEY;
input		[3:0]	SW;

input				AUD_ADCDAT;

// Bidirectionals

inout				AUD_BCLK;
inout				AUD_ADCLRCK;
inout				AUD_DACLRCK;


inout				I2C_SDAT;

// Outputs
output				AUD_XCK;
output				AUD_DACDAT;
output				I2C_SCLK;

/*****************************************************************************

 *                 Internal Wires and Registers Declarations                 *

 *****************************************************************************/
// Internal Wires

wire				audio_in_available;
wire		[31:0]	left_channel_audio_in;
wire		[31:0]	right_channel_audio_in;
wire				read_audio_in;

wire				audio_out_allowed;
wire		[31:0]	left_channel_audio_out;
wire		[31:0]	right_channel_audio_out;
wire				write_audio_out;

// Internal Registers

// State Machine Registers

/*****************************************************************************

 *                         Finite State Machine(s)                           *

 *****************************************************************************/

 

 /*****************************************************************************

 *                         SOUNDS GO HERE                               *

 *****************************************************************************/
 output [15:0] address_sound;
 output [31:0] q_sound;
 output CLOCK_8k; 
	
 wire q_sound1, q_sound2, q_sound3; 
 OneToFiveAudio my_Sound(

        .address    (myAdd),            
        .clock      (CLOCK_8k),                 
        .q          (q_sound1)                  
    );
SixtoNine my_Sound1(

        .address    (myAdd),            
        .clock      (CLOCK_8k),                 
        .q          (q_sound)                  
    );
TensAudio my_Sound2(

        .address    (myAdd),            
        .clock      (CLOCK_8k),                 
        .q          (q_sound2)                  
    );

SpeechAudio my_Sound3(

        .address    (myAdd),            
        .clock      (CLOCK_8k),                 
        .q          (q_sound3)                  
    );


	 

 clock_divider fiftyTOeightyk(CLOCK_50, CLOCK_8k);
 reg [16:0] myAdd;
 always @(posedge CLOCK_8k) begin
		if(SW[3]==1) begin
			myAdd = myAdd + 1;
		end
		//if(myAdd > 14'h9b18 || SW[3]==0) begin 
			//myAdd = 14'd0; 
		//end
 end
 assign address_sound = myAdd; 
 
 assign right_out = q_sound;
 assign left_out = right_out; 

 /*****************************************************************************

 *                         SOUNDS END HERE                              *

 *****************************************************************************/
assign read_audio_in			= audio_in_available & audio_out_allowed;

wire [31:0] left_in, right_in, left_out, right_out;
assign left_in = left_channel_audio_in;
assign right_in = right_channel_audio_in;

assign left_channel_audio_out	= left_out;
assign right_channel_audio_out	= right_out;
assign write_audio_out			= audio_in_available & audio_out_allowed;

/*****************************************************************************

 *                              Internal Modules                             *

 *****************************************************************************/
Audio_Controller Audio_Controller (

	// Inputs
	.CLOCK_50						(CLOCK_50),
	.reset						(~KEY[0]),

	.clear_audio_in_memory		(),
	.read_audio_in				(read_audio_in),

	.clear_audio_out_memory		(),
	.left_channel_audio_out		(left_channel_audio_out),
	.right_channel_audio_out	(right_channel_audio_out),
	.write_audio_out			(write_audio_out),
	.AUD_ADCDAT					(AUD_ADCDAT),

	// Bidirectionals

	.AUD_BCLK					(AUD_BCLK),
	.AUD_ADCLRCK				(AUD_ADCLRCK),
	.AUD_DACLRCK				(AUD_DACLRCK),

	// Outputs

	.audio_in_available			(audio_in_available),
	.left_channel_audio_in		(left_channel_audio_in),
	.right_channel_audio_in		(right_channel_audio_in),

	.audio_out_allowed			(audio_out_allowed),
	.AUD_XCK					(AUD_XCK),
	.AUD_DACDAT					(AUD_DACDAT),

);



avconf #(.USE_MIC_INPUT(1)) avc (
	.I2C_SCLK					(I2C_SCLK),
	.I2C_SDAT					(I2C_SDAT),
	.CLOCK_50					(CLOCK_50),
	.reset						(~KEY[0]),
	.key1							(KEY[1]),
	.key2							(KEY[2])
);



endmodule



module clock_divider(clock_in, clock_out);
	input clock_in; // input clock on FPGA
	output clock_out; // output clock after dividing the input clock by divisor
	reg[27:0] counter=28'd0;
	parameter DIVISOR = 28'd6250;//d10000;//d6250;

	//parameter DIVISOR = 28'd100; 

	// The frequency of the output clk_out

	//  = The frequency of the input clk_in divided by DIVISOR

	// For example: Fclk_in = 50Mhz, if you want to get 1Hz signal to blink LEDs

	// You will modify the DIVISOR parameter value to 28'd50.000.000

	// Then the frequency of the output clk_out = 50Mhz/50.000.000 = 1Hz
	always @(posedge clock_in)
	begin
		counter <= counter + 28'd1;
		if(counter>=(DIVISOR-1)) begin
			counter <= 28'd0;
		end
	end
	assign clock_out = (counter<DIVISOR/2)? 1'b0 : 1'b1;
endmodule