/**
 * NOTE: you should not need to change this file! This file will be swapped out for a grading
 * "skeleton" for testing. We will also remove your imem and dmem file.
 *
 * NOTE: skeleton should be your top-level module!
 *
 * This skeleton file serves as a wrapper around the processor to provide certain control signals
 * and interfaces to memory elements. This structure allows for easier testing, as it is easier to
 * inspect which signals the processor tries to assert when.
 */

module FinalProj(CLOCK_50, reset, PC, idata, writeReg, ctrl_writeEnable, ctrl_writeReg,
					LightSwitch, LEDSwitch, FanSwitch, TimerSwitch, Humidity, Temp,
					LightOut, LEDOut, FanOut, TempSeg1, TempSeg0, HumSeg1, HumSeg0);
    input CLOCK_50, reset;
	 output [31:0] writeReg; 
	 output [11:0] PC; 
	 output [31:0] idata;
	 output [4:0] ctrl_writeReg;
	 output ctrl_writeEnable;
	 
	 input LightSwitch, LEDSwitch, FanSwitch, TimerSwitch; 
	 input [6:0] Humidity;
	 input [4:0] Temp; 
	 output LightOut, LEDOut, FanOut; 
	 output [6:0]TempSeg1, TempSeg0, HumSeg1, HumSeg0; 
	 
	 assign PC = address_imem;
	 assign idata = q_imem; 
	 assign writeReg = data_writeReg;
	 
	 wire clock; 
	 assign clock = CLOCK_50;
	 
	 /*Temperature and Humidity Display*/
	 temp2Segment(Temp, TempSeg1, TempSeg0); 
	 hum2Segment(Humidity, HumSeg1, HumSeg0); 
	 
    /** IMEM **/
    // Figure out how to generate a Quartus syncram component and commit the generated verilog file.
    // Make sure you configure it correctly!
    wire [11:0] address_imem;
    wire [31:0] q_imem;
    imem my_imem(
        .address    (address_imem),            // address of data
        .clock      (~clock),                  // you may need to invert the clock
        .q          (q_imem)                   // the raw instruction
    );

    /** DMEM **/
    // Figure out how to generate a Quartus syncram component and commit the generated verilog file.
    // Make sure you configure it correctly!
    wire [11:0] address_dmem;
    wire [31:0] data;
    wire wren;
    wire [31:0] q_dmem;
    dmem my_dmem(
        .address    (address_dmem),      // address of data
        .clock      (~clock),            // may need to invert the clock
        .data	    (data),               // data you want to write
        .wren	    (wren),               // write enable
        .q         (q_dmem)              // data from dmem
    );

    /** REGFILE **/
    // Instantiate your regfile
    wire ctrl_writeEnable;
    wire [4:0] ctrl_writeReg, ctrl_readRegA, ctrl_readRegB;
    wire [31:0] data_writeReg;
    wire [31:0] data_readRegA, data_readRegB;
    regfile my_regfile(
        clock,
        ctrl_writeEnable,
        reset,
        ctrl_writeReg,
        ctrl_readRegA,
        ctrl_readRegB,
        data_writeReg,
        data_readRegA,
        data_readRegB
    );

    /** PROCESSOR **/
    processor my_processor(
        // Control signals
        clock,                          // I: The master clock
        reset,                          // I: A reset signal

        // Imem
        address_imem,                   // O: The address of the data to get from imem
        q_imem,                         // I: The data from imem

        // Dmem
        address_dmem,                   // O: The address of the data to get or put from/to dmem
        data,                           // O: The data to write to dmem
        wren,                           // O: Write enable for dmem
        q_dmem,                         // I: The data from dmem

        // Regfile
        ctrl_writeEnable,               // O: Write enable for regfile
        ctrl_writeReg,                  // O: Register to write to in regfile
        ctrl_readRegA,                  // O: Register to read from port A of regfile
        ctrl_readRegB,                  // O: Register to read from port B of regfile
        data_writeReg,                  // O: Data to write to for regfile
        data_readRegA,                  // I: Data from port A of regfile
        data_readRegB,                   // I: Data from port B of regfile
		  
		  LightSwitch, LEDSwitch, FanSwitch, TimerSwitch, Humidity, Temp,
		  LightOut, LEDOut, FanOut
    );

endmodule

module temp2Segment(temp, seg1, seg0); 
	input [4:0] temp; 
	output [6:0] seg0, seg1; 
	
	wire[7:0] in; 
	wire[3:0] tens, ones; 
	assign in[7:6] = 2'd0; 
	assign in[5:1] = temp; 
	assign in[0] = 1'b0;
	
	
	bit8toDec convert1(in, tens, ones);
	Hexadecimal_To_Seven_Segment(tens, seg1);
	Hexadecimal_To_Seven_Segment(ones, seg0);
	
endmodule 

module hum2Segment(humidity, seg1, seg0); 
	input [7:0] humidity; 
	output [6:0] seg0, seg1; 
	
	wire[7:0] in; 
	wire[3:0] tens, ones; 
	assign in[7:1] = humidity; 
	assign in[0] = 1'd0; 
	
	bit8toDec convert1(in, tens, ones);
	Hexadecimal_To_Seven_Segment(tens, seg1);
	Hexadecimal_To_Seven_Segment(ones, seg0);

endmodule 

module bit8toDec(in, tens, ones);
	input [7:0] in; 
	output reg [3:0] tens, ones; 
	reg [3:0] hundreds; 
	
	integer i;
	always @(in) begin
		hundreds = 4'd0;
		tens = 4'd0; 
		ones = 4'd0; 
		
		for(i=7; i>0; i=i-1) begin
			if (hundreds >= 5)
				hundreds = hundreds + 3; 
			if (tens >= 5)
				tens = tens +3; 
			if (ones >= 5)
				ones = ones +3; 
				
			hundreds = hundreds << 1; 
			hundreds[0] = tens[3];
			tens = tens << 1; 
			tens[0] = ones[3];
			ones = ones << 1; 
			ones[0] = in[i];
		end
	end
	
endmodule
